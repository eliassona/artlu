artlu = (os (external | in_map | out_map | decoder | encoder | internal | event | import) os)*

new-line = '\n' | Epsilon
<colon> = <':'>
open-curly = <'{'>
close-curly = <'};'>
<semiColon> = <';'>
<space> = <#'[ \t\n,]+'>
<os> = <#'[ \t\n]*'>
<letter> 	     = #'[A-Za-z]'
decimalDigit = #'[0-9]'
octalDigit   = #'[0-7]'
hexDigit     = #'[0-9a-fA-F]'
sign = '+' | '-'
intLit     = [sign os] (decimalLit | octalLit | hexLit)
decimalLit = #'[1-9]' { decimalDigit }
octalLit   = "0" { octalDigit }
hexLit     = <"0"> <( "x" | "X" )> hexDigit { hexDigit }

strLit = ( <"\'"> { charValue } <"\'"> ) |  ( <'\"'> { charValue } <'\"'> ) 
charValue = hexEscape | octEscape | charEscape  | #"[^\n]"
hexEscape = <'\\'> ( "x" | "X" ) hexDigit hexDigit   
octEscape = <'\\'> octalDigit octalDigit octalDigit
charEscape = <'\\'> ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | '\\' | "\'" | '\"' ) 
quote = <"\'"> | <'\"'>

ident = letter { letter | decimalDigit | "_" }
bcd = <'bcd'> [os <'('> os ident os <')'>]
endian-type = [os <'('> os (little_endian | big_endian | 'lsb_lo') os <')'>]
int = <'int'> endian-type
byte = <'byte'> endian-type
short = <'short'> endian-type
long = <'long'> endian-type
bigint = <'bigint'> endian-type
type = list | 'double' | 'float' | 'ascii' | int | byte | bcd | short | long | bigint | 'bytearray' | ident

addition = aplExpression os <'+'> os  aplExpression
subtraction = aplExpression os <'-'> os  aplExpression
multiplication = aplExpression os <'*'> os  aplExpression
division = aplExpression os <'/'> os  aplExpression
right-shift = aplExpression os <'>>'> os aplExpression
left-shift = aplExpression os <'<<'> os aplExpression
bit-and = aplExpression os <'&'> os aplExpression
bit-or = aplExpression os <'|'> os aplExpression
paren-expr = <'('> os aplExpression os <')'>
fn-call = ident os <'('> (os [aplExpression] os) (os <','> os aplExpression os)* <')'>
if-expr = aplBooleanExpression os <'?'> os aplExpression os <colon> os aplExpression
type-cast = <'('> os ident os <')'> os aplExpression
aplExpression = fn-call | strLit | intLit | ident | addition | subtraction | multiplication | division | paren-expr | right-shift | bit-and | bit-or | if-expr | type-cast

equals = aplExpression os <'=='> os aplExpression
not-equals = aplExpression os <'!='> os aplExpression
gt = aplExpression os <'>'> os aplExpression
gte = aplExpression os <'>='> os aplExpression
lt = aplExpression os <'<'> os aplExpression
lte = aplExpression os <'<='> os aplExpression
or = aplBooleanExpression os <'||'> os aplBooleanExpression
and = aplBooleanExpression os <'&&'> os aplBooleanExpression
boolean = 'true' | 'false'


aplBooleanExpression = not-equals | boolean | equals | gt | lt | gte | lte | or | and | fn-call | ident

dynamicSizeExpr = aplExpression
presentIf = <'present'> space <'if'> os <'('> os aplBooleanExpression os <')'>
dynamic_size = <'dynamic_size'> os <'('> os dynamicSizeExpr os <')'>
bit_block_static_size = <'static_size'> os <'('> os intLit os <')'>
bit_blockSize = dynamic_size | bit_block_static_size
bit_size = <'bit_size'> os <'('> os aplExpression os <')'>
align = <'align'> os <'('> os ('right' | 'left') os <')'>
padded_with = <'padded_with'> os <'('> os (intLit  | strLit) os <')'>
terminated_by = <'terminated_by'> os <'('> os (aplExpression) os <')'>
identified_by = <'identified_by'> os <'('> os (aplBooleanExpression) os <')'>
base = 'base10' | 'base16'
encoding = ('float' | 'double' | 'bigdec') | ('byte' | 'short' | 'int' | 'long' | 'bigint' ) os <'('> os base os <')'>
native_size = <'native_size'> os <'('> os aplExpression os <')'>
byte_alignment = <'byte_alignment'> <'('> os aplExpression os <')'>
msb = <'msb'> <'('> os aplExpression os <')'>
lsb = <'lsb'> <'('> os aplExpression os <')'>
signed = <'signed'>
little_endian = <'little_endian'>
big_endian = <'big_endian'>
external_only = <'external_only'>
unsigned = <'unsigned'> 
element_count = <'element_count'> <'('> os aplExpression os <')'>
<field-property> = element_count | unsigned | external_only | little_endian | big_endian | signed | bit_size | presentIf | encode_value | align | padded_with | terminated_by | encoding | static_size | native_size | dynamic_size | byte_alignment | msb | lsb | 'optional'
field-properties = field-property (os <','> os field-property)*
field = type space ident os (semiColon | (<colon> os field-properties os semiColon))

case = <'case'> os <'('> os aplExpression os <')'> [os colon os 'include_prefix'] os externalBlock
default = <'default'> os colon os 'include_prefix' os externalBlock
cases = (os case)* os [default]
switched_set-block = open-curly (os (field | bit_block))* cases os close-curly
switched_set_properties = colon os external-properties
switched_set = <'switched_set'> os  <'('> os ident os <')'> os [switched_set_properties] os switched_set-block
repeat_block = <'repeat_block'> os <'('> os aplExpression os <')'> os bitBlock


bitBlock = <open-curly> (os (field | repeat_block))* os <close-curly>
bitBlock-property = bit_blockSize | presentIf
bit_block = <'bit_block'> os colon os bitBlock-property (os <','> os bitBlock-property)* os bitBlock
encode_value = <'encode_value'> os <'('> os aplExpression os <')'>
static_size = <'static_size'> os <'('> os intLit os <')'>
block_size = <'block_size'> os <'('> os aplExpression os <')'>
set = <'set'> [os colon os external-properties] os externalBlock
externalBlock = <open-curly> (os (set | switched_set | field | bit_block))* os <close-curly>
<externalSize> = dynamic_size | static_size
<external-property> = 'ignore_trailing_data' | externalSize | terminated_by | identified_by | padded_with
external-properties = external-property (os <','> os external-property)*
external = <'external'> space ident [space 'sequential'] os (externalBlock | (colon os external-properties os externalBlock)) os

internal-mapping = 'internal' | 'target_internal' 
emit-field = ('emit_field' os <'('> os ident os <','> os ident os <')'>)
ext-int-arg = <'('> os ident os <')'>
ext-int-mapping = (('external' | internal-mapping) ext-int-arg) | emit-field
ext-int-mappings = ext-int-mapping (os <','> os ext-int-mapping)*

field-mapping = (('i:' os ident space <'and'> space 'e:' os ident) | ('e:' os ident space <'and'> space 'i:' os ident)) os semiColon

using = ident os colon os <'using'> space <'in_map'> space ident os semiColon

automatic-block = open-curly (os using)* os <'}'>

in_map = <'in_map'> space ident os colon os 
         ext-int-mappings
         os <open-curly> os (('automatic' [os colon os 'use_external_names'] [space automatic-block os] (semiColon os)) | (os field-mapping)*) os <close-curly>  


decoder-in_map = <'in_map'> os <'('> os ident os <')'>
decoders-in_map = decoder-in_map (os <','> os decoder-in_map)* os semiColon
decoder-ref = <'decoder'> space ident [space '*'] os semiColon
decoder-refs = (os decoder-ref)*
decoder-block = open-curly decoder-refs os close-curly
decoder = <'decoder'> os ident os ((colon os decoders-in_map) | decoder-block)  



out_map = <'out_map'> space ident os colon os 
         ext-int-mappings
         os <open-curly> os (('automatic;') | (os field-mapping)*) os <close-curly>  
 
encoder-out_map = <'out_map'> os <'('> os ident os <')'>
encoders-out_map = encoder-out_map (os <','> os encoder-out_map)* os semiColon
encoder-property = block_size | terminated_by | encoder-out_map
encoder-properties = encoder-property (os <','> os encoder-property)*
encoder = <'encoder'> os ident os colon os encoder-properties os semiColon  


list = <'list'> os <'<'> os internal-type  os <'>'>
map = <'map'> os <'<'> os internal-type  os <','> os internal-type os <'>'>
         
internal-type = 'double' | 'float' | 'int' | 'byte' | short | 'long' | 'bigint' | 'bytearray' | ident | list | map
internal-field = internal-type space ident [os colon os 'optional'] os semiColon          
internalBlock = open-curly (os | (os internal-field)*) os  close-curly
extends = <'extends'> os <'('> os ident os <')'> 
internal = <'internal'> space ident [os colon os extends] os internalBlock  
event = <'event'> space ident os internalBlock  

import = <'import'> space ident (os <'.'> os ident)* os semiColon